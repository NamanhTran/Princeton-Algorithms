See the Assessment Guide for information on how to interpret this report. ASSESSMENT SUMMARY Compilation: PASSED (0 errors, 2 warnings) API: PASSED Spotbugs: FAILED (2 warnings) PMD: FAILED (2 warnings) Checkstyle: FAILED (0 errors, 1 warning) Correctness: 41/43 tests passed Memory: 105/105 tests passed Timing: 172/193 tests passed Aggregate score: 95.03% [Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%] ASSESSMENT DETAILS The following files were submitted: ---------------------------------- 6.1K May 27 21:40 Deque.java 600 May 27 21:40 Permutation.java 7.7K May 27 21:40 RandomizedQueue.java ******************************************************************************** * COMPILING ******************************************************************************** % javac Deque.java *----------------------------------------------------------- % javac RandomizedQueue.java *----------------------------------------------------------- RandomizedQueue.java:20: warning: [unchecked] unchecked cast queue = (Item[]) new Object[1]; ^ required: Item[] found: Object[] where Item is a type-variable: Item extends Object declared in class RandomizedQueue RandomizedQueue.java:140: warning: [unchecked] unchecked cast Item[] newArr = (Item[]) new Object[n]; ^ required: Item[] found: Object[] where Item is a type-variable: Item extends Object declared in class RandomizedQueue 2 warnings % javac Permutation.java *----------------------------------------------------------- ================================================================ Checking the APIs of your programs. *----------------------------------------------------------- Deque: RandomizedQueue: Permutation: ================================================================ ******************************************************************************** * CHECKING STYLE AND COMMON BUG PATTERNS ******************************************************************************** % spotbugs *.class *----------------------------------------------------------- M D RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT RV: Calls the method 'isEmpty()' but ignores its return value. The method, however, does not produce any effect other than returning a value. At RandomizedQueue.java:[line 262] M D RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT RV: Calls the method 'size()' but ignores its return value. The method, however, does not produce any effect other than returning a value. At RandomizedQueue.java:[line 263] Warnings generated: 2 ================================================================ % pmd . *----------------------------------------------------------- RandomizedQueue.java:92: The private instance (or static) variable 'itQueue' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField] RandomizedQueue.java:94: The private instance (or static) variable 'itEnd' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField] PMD ends with 2 warnings. ================================================================ % checkstyle *.java *----------------------------------------------------------- [WARN] Permutation.java:13:14: 'while' is not followed by whitespace. [WhitespaceAfter] Checkstyle ends with 0 errors and 1 warning. % custom checkstyle checks for Deque.java *----------------------------------------------------------- % custom checkstyle checks for RandomizedQueue.java *----------------------------------------------------------- % custom checkstyle checks for Permutation.java *----------------------------------------------------------- ================================================================ ******************************************************************************** * TESTING CORRECTNESS ******************************************************************************** Testing correctness of Deque *----------------------------------------------------------- Running 16 total tests. Tests 1-6 make random calls to addFirst(), addLast(), removeFirst(), removeLast(), isEmpty(), and size(). The probabilities of each operation are (p1, p2, p3, p4, p5, p6), respectively. Test 1: check random calls to addFirst(), addLast(), and size() * 5 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2) * 50 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2) * 500 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2) * 1000 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2) ==> passed Test 2: check random calls to addFirst(), removeFirst(), and isEmpty() * 5 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0) * 50 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0) * 500 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0) * 1000 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0) * 5 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0) * 50 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0) * 500 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0) * 1000 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0) ==> passed Test 3: check random calls to addFirst(), removeLast(), and isEmpty() * 5 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0) * 50 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0) * 500 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0) * 1000 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0) * 5 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0) * 50 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0) * 500 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0) * 1000 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0) ==> passed Test 4: check random calls to addLast(), removeLast(), and isEmpty() * 5 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0) * 50 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0) * 500 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0) * 1000 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0) * 5 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0) * 50 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0) * 500 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0) * 1000 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0) ==> passed Test 5: check random calls to addLast(), removeFirst(), and isEmpty() * 5 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0) * 50 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0) * 500 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0) * 1000 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0) * 5 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0) * 50 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0) * 500 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0) * 1000 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0) ==> passed Test 6: check random calls to addFirst(), addLast(), removeFirst(), removeLast(), isEmpty(), and size() * 5 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1) * 50 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1) * 500 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1) * 1000 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1) * 5 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1) * 50 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1) * 500 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1) * 1000 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1) ==> passed Test 7: check removeFirst() and removeLast() from an empty deque * removeFirst() * removeLast() ==> passed Test 8: check whether two Deque objects can be created at the same time * n = 10 * n = 1000 ==> passed Test 9: check iterator() after n calls to addFirst() * n = 10 * n = 50 ==> passed Test 10: check iterator() after each of m intermixed calls to addFirst(), addLast(), removeFirst(), and removeLast() * m = 20 * m = 50 * m = 100 * m = 1000 ==> passed Test 11: create two nested iterators to same deque * n = 10 * n = 50 ==> passed Test 12: create two parallel iterators to same deque ==> passed Test 13: create Deque objects of different parameterized types ==> passed Test 14: call addFirst() and addLast() with null argument ==> passed Test 15: check that remove() and next() throw the specified exceptions in iterator() ==> passed Test 16: call iterator() when the deque is empty ==> passed Total: 16/16 tests passed! ================================================================ Testing correctness of RandomizedQueue *----------------------------------------------------------- Running 18 total tests. Tests 1-4 make random calls to enqueue(), dequeue(), sample(), isEmpty(), and size(). The probabilities of each operation are (p1, p2, p3, p4, p5), respectively. Test 1: check random calls to enqueue() and size() * 5 random calls (0.8, 0.0, 0.0, 0.0, 0.2) * 50 random calls (0.8, 0.0, 0.0, 0.0, 0.2) * 500 random calls (0.8, 0.0, 0.0, 0.0, 0.2) * 1000 random calls (0.8, 0.0, 0.0, 0.0, 0.2) ==> passed Test 2: check random calls to enqueue() and dequeue() * 5 random calls (0.7, 0.1, 0.0, 0.1, 0.1) * 50 random calls (0.7, 0.1, 0.0, 0.1, 0.1) * 500 random calls (0.7, 0.1, 0.0, 0.1, 0.1) * 1000 random calls (0.7, 0.1, 0.0, 0.1, 0.1) * 5 random calls (0.1, 0.7, 0.0, 0.1, 0.1) * 50 random calls (0.1, 0.7, 0.0, 0.1, 0.1) * 500 random calls (0.1, 0.7, 0.0, 0.1, 0.1) * 1000 random calls (0.1, 0.7, 0.0, 0.1, 0.1) ==> passed Test 3: check random calls to enqueue(), sample(), and size() * 5 random calls (0.8, 0.0, 0.1, 0.0, 0.1) * 50 random calls (0.8, 0.0, 0.1, 0.0, 0.1) * 500 random calls (0.8, 0.0, 0.1, 0.0, 0.1) * 1000 random calls (0.8, 0.0, 0.1, 0.0, 0.1) * 5 random calls (0.1, 0.0, 0.8, 0.0, 0.1) * 50 random calls (0.1, 0.0, 0.8, 0.0, 0.1) * 500 random calls (0.1, 0.0, 0.8, 0.0, 0.1) * 1000 random calls (0.1, 0.0, 0.8, 0.0, 0.1) ==> passed Test 4: check random calls to enqueue(), dequeue(), sample(), isEmpty(), and size() * 5 random calls (0.6, 0.1, 0.1, 0.1, 0.1) * 50 random calls (0.6, 0.1, 0.1, 0.1, 0.1) * 500 random calls (0.6, 0.1, 0.1, 0.1, 0.1) * 1000 random calls (0.6, 0.1, 0.1, 0.1, 0.1) * 5 random calls (0.1, 0.6, 0.1, 0.1, 0.1) * 50 random calls (0.1, 0.6, 0.1, 0.1, 0.1) * 500 random calls (0.1, 0.6, 0.1, 0.1, 0.1) * 1000 random calls (0.1, 0.6, 0.1, 0.1, 0.1) ==> passed Test 5: call dequeue() and sample() from an empty randomized queue * dequeue() * sample() ==> passed Test 6: create multiple randomized queue objects at the same time * n = 10 * n = 100 ==> passed Test 7: check that iterator() returns correct items after a sequence of n enqueue() operations * n = 10 * n = 50 ==> passed Test 8: check that iterator() returns correct items after sequence of m enqueue() and dequeue() operations * m = 10 * m = 1000 ==> passed Test 9: create two nested iterators over the same randomized queue * n = 10 * n = 50 ==> passed Test 10: create two parallel iterators over the same randomized queue * n = 10 * n = 50 ==> passed Test 11: create two iterators over different randomized queues ==> passed Test 12: create RandomizedQueue objects of different parameterized types ==> passed Test 13: check randomness of sample() by enqueueing n items, repeatedly calling sample(), and counting the frequency of each item * n = 3, trials = 12000 * n = 5, trials = 12000 * n = 8, trials = 12000 * n = 10, trials = 12000 ==> passed Test 14: check randomness of dequeue() by enqueueing n items, dequeueing n items, and seeing whether each of the n! permutations is equally likely * n = 2, trials = 12000 * n = 3, trials = 12000 * n = 4, trials = 12000 * n = 5, trials = 12000 ==> passed Test 15: check randomness of iterator() by enqueueing n items, iterating over those n items, and seeing whether each of the n! permutations is equally likely * n = 2, trials = 12000 value observed expected 2*O*ln(O/E) ------------------------------------------- AB 12000 6000.0 16635.53 BA 0 6000.0 0.00 ------------------------------------------- 12000 12000.0 16635.53 G-statistic = 16635.53 (p-value = 0.000000, reject if p-value <= 0.0001) Note: a correct solution will fail this test by bad luck 1 time in 10,000. * n = 3, trials = 12000 * n = 4, trials = 12000 value observed expected 2*O*ln(O/E) ------------------------------------------- ABCD 12000 500.0 76273.29 ABDC 0 500.0 0.00 ACBD 0 500.0 0.00 ACDB 0 500.0 0.00 ADBC 0 500.0 0.00 ADCB 0 500.0 0.00 BACD 0 500.0 0.00 BADC 0 500.0 0.00 BCAD 0 500.0 0.00 BCDA 0 500.0 0.00 BDAC 0 500.0 0.00 BDCA 0 500.0 0.00 CABD 0 500.0 0.00 CADB 0 500.0 0.00 CBAD 0 500.0 0.00 CBDA 0 500.0 0.00 CDAB 0 500.0 0.00 CDBA 0 500.0 0.00 DABC 0 500.0 0.00 DACB 0 500.0 0.00 DBAC 0 500.0 0.00 DBCA 0 500.0 0.00 DCAB 0 500.0 0.00 DCBA 0 500.0 0.00 ------------------------------------------- 12000 12000.0 76273.29 G-statistic = 76273.29 (p-value = 0.000000, reject if p-value <= 0.0001) Note: a correct solution will fail this test by bad luck 1 time in 10,000. * n = 5, trials = 12000 ==> FAILED Test 16: call enqueue() with a null argument - fails to throw an exception when calling enqueue() with a null argument ==> FAILED Test 17: check that remove() and next() throw the specified exceptions in iterator() ==> passed Test 18: call iterator() when randomized queue is empty ==> passed Total: 16/18 tests passed! ================================================================ ******************************************************************************** * TESTING CORRECTNESS (substituting reference RandomizedQueue and Deque) ******************************************************************************** Testing correctness of Permutation *----------------------------------------------------------- Tests 1-5 call the main() function directly, resetting standard input before each call. Running 9 total tests. Test 1a: check formatting for sample inputs from assignment specification % java Permutation 3 < distinct.txt B E H % java Permutation 3 < distinct.txt B D F % java Permutation 8 < duplicates.txt BB CC CC BB BB BB BB AA ==> passed Test 1b: check formatting for other inputs % java Permutation 8 < mediumTale.txt age foolishness it of it best was was % java Permutation 0 < distinct.txt [no output] ==> passed Test 2: check that main() reads all data from standard input * filename = distinct.txt, k = 3 * filename = distinct.txt, k = 3 * filename = duplicates.txt, k = 8 * filename = mediumTale.txt, k = 8 ==> passed Test 3a: check that main() prints each item from the sequence at most once (for inputs with no duplicate strings) * filename = distinct.txt, k = 3 * filename = distinct.txt, k = 1 * filename = distinct.txt, k = 9 * filename = permutation6.txt, k = 6 * filename = permutation10.txt, k = 10 ==> passed Test 3b: check that main() prints each item from the sequence at most once (for inputs with duplicate strings) * filename = duplicates.txt, k = 8 * filename = duplicates.txt, k = 3 * filename = permutation8.txt, k = 6 * filename = permutation8.txt, k = 2 * filename = tinyTale.txt, k = 10 ==> passed Test 3c: check that main() prints each item from the sequence at most once (for inputs with newlines) * filename = mediumTale.txt, k = 10 * filename = mediumTale.txt, k = 20 * filename = tale.txt, k = 10 * filename = tale.txt, k = 50 ==> passed Test 4: check main() when k = 0 * filename = distinct.txt, k = 0 * filename = distinct.txt, k = 0 ==> passed Test 5a: check that permutations are uniformly random (for inputs with no duplicate strings) * filename = permutation4.txt, k = 1 * filename = permutation4.txt, k = 2 * filename = permutation4.txt, k = 3 * filename = permutation4.txt, k = 4 * filename = permutation6.txt, k = 2 ==> passed Test 5b: check that permutations are uniformly random (for inputs with duplicate strings) * filename = permutation5.txt, k = 1 * filename = permutation5.txt, k = 2 * filename = permutation5.txt, k = 3 * filename = duplicates.txt, k = 3 * filename = permutation8.txt, k = 2 ==> passed Total: 9/9 tests passed! ================================================================ ******************************************************************************** * TIMING (substituting reference RandomizedQueue and Deque) ******************************************************************************** Timing Permutation *----------------------------------------------------------- Running 23 total tests. Test 1: count calls to methods in StdIn * java Permutation 5 < distinct.txt * java Permutation 10 < permutation10.txt * java Permutation 1 < mediumTale.txt * java Permutation 20 < tale.txt * java Permutation 100 < tale.txt * java Permutation 16412 < tale.txt ==> passed Test 2: count calls to methods in Deque and RandomizedQueue * java Permutation 5 < distinct.txt * java Permutation 10 < permutation10.txt * java Permutation 1 < mediumTale.txt * java Permutation 20 < tale.txt * java Permutation 100 < tale.txt * java Permutation 16412 < tale.txt ==> passed Test 3: count calls to methods in StdRandom * java Permutation 5 < distinct.txt * java Permutation 10 < permutation10.txt * java Permutation 1 < mediumTale.txt * java Permutation 20 < tale.txt * java Permutation 100 < tale.txt * java Permutation 16412 < tale.txt ==> passed Test 4: Time main() with k = 5, for inputs containing n random strings n seconds ------------------------------ => passed 1000 0.00 => passed 2000 0.00 => passed 4000 0.00 => passed 8000 0.00 => passed 16000 0.00 => passed 32000 0.01 => passed 64000 0.02 => passed 128000 0.04 => passed 256000 0.09 => passed 512000 0.16 ==> 10/10 tests passed Test 5: Time main() with k = 1000, for inputs containing n random strings n seconds ------------------------------ => passed 1000 0.00 => passed 2000 0.00 => passed 4000 0.00 => passed 8000 0.00 => passed 16000 0.01 => passed 32000 0.01 => passed 64000 0.02 => passed 128000 0.04 => passed 256000 0.07 => passed 512000 0.14 ==> 10/10 tests passed Total: 23/23 tests passed! ================================================================ ******************************************************************************** * MEMORY ******************************************************************************** Analyzing memory of Permutation *----------------------------------------------------------- Running 2 total tests. Test 1: check that only one Deque or RandomizedQueue object is created * filename = distinct.txt, n = 9, k = 1 * filename = distinct.txt, n = 9, k = 2 * filename = distinct.txt, n = 9, k = 4 * filename = tinyTale.txt, n = 12, k = 10 * filename = tale.txt, n = 138653, k = 50 ==> passed Test 2: check that the maximum size of any Deque or RandomizedQueue object created is between k and n * filename = distinct.txt, n = 9, k = 1 * filename = distinct.txt, n = 9, k = 2 * filename = distinct.txt, n = 9, k = 4 * filename = tinyTale.txt, n = 12, k = 10 * filename = tale.txt, n = 138653, k = 5 * filename = tale.txt, n = 138653, k = 50 * filename = tale.txt, n = 138653, k = 500 * filename = tale.txt, n = 138653, k = 5000 * filename = tale.txt, n = 138653, k = 50000 ==> passed Test 3 (bonus): check that maximum size of any or Deque or RandomizedQueue object created is equal to k * filename = tale.txt, n = 138653, k = 5 - max size of RandomizedQueue object = 138653 * filename = tale.txt, n = 138653, k = 50 - max size of RandomizedQueue object = 138653 * filename = tale.txt, n = 138653, k = 500 - max size of RandomizedQueue object = 138653 * filename = tale.txt, n = 138653, k = 5000 - max size of RandomizedQueue object = 138653 * filename = tale.txt, n = 138653, k = 50000 - max size of RandomizedQueue object = 138653 ==> FAILED Total: 2/2 tests passed! ================================================================ ******************************************************************************** * MEMORY ******************************************************************************** Analyzing memory of Deque *----------------------------------------------------------- For tests 1-4, the maximum amount of memory allowed for a Deque containing n items is 48n + 192. Running 28 total tests. Test 1a-1e: Total memory usage after inserting n items, where n is a power of 2. n bytes ---------------------------------------------------------- => passed 8 424 => passed 64 3112 => passed 256 12328 => passed 1024 49192 => passed 4096 196648 ==> 5/5 tests passed Memory: 48.00 n + 40.00 (R^2 = 1.000) Test 2a-2e: Total memory usage after inserting n+1 items, where n is a power of 2. n bytes ---------------------------------------------------------- => passed 8 472 => passed 64 3160 => passed 256 12376 => passed 1024 49240 => passed 4096 196696 ==> 5/5 tests passed Memory after adding n = 2^i + 1 items: 48.00 n + 40.00 (R^2 = 1.000) Test 3a-3e: Total memory usage after inserting 2n+1 items and deleting n items, where n is a power of 2. n bytes ---------------------------------------------------------- => passed 8 472 => passed 64 3160 => passed 256 12376 => passed 1024 49240 => passed 4096 196696 ==> 5/5 tests passed Memory: 48.00 n + 40.00 (R^2 = 1.000) Test 4a-4e: Total memory usage after inserting n items and then deleting all but one item, where n is a power of 2. (should not grow with n or be too large of a constant) n bytes ---------------------------------------------------------- => passed 8 88 => passed 64 88 => passed 256 88 => passed 1024 88 => passed 4096 88 ==> 5/5 tests passed Memory after adding n = 2^i items: 88.00 (R^2 = 1.000) Test 5a-5e: Total memory usage of iterator after inserting n items. (should not grow with n or be too large of a constant) n bytes ---------------------------------------------------------- => passed 8 32 => passed 64 32 => passed 256 32 => passed 1024 32 => passed 4096 32 ==> 5/5 tests passed Memory of iterator after adding n = 2^i items: 32.00 (R^2 = 1.000) Test 6a: Insert n strings; delete them one at a time, checking for loitering after each deletion. The probabilities of addFirst() and addLast() are (p1, p2), respectively. The probabilities of removeFirst() and removeLast() are (q1, q2), respectively * 100 random insertions (1.0, 0.0) and 100 random deletions (1.0, 0.0) * 100 random insertions (1.0, 0.0) and 100 random deletions (0.0, 1.0) * 100 random insertions (0.0, 1.0) and 100 random deletions (1.0, 0.0) * 100 random insertions (0.0, 1.0) and 100 random deletions (0.0, 1.0) * 100 random insertions (0.5, 0.5) and 100 random deletions (0.5, 0.5) ==> passed Test 6b: Perform random operations, checking for loitering after each operation. The probabilities of addFirst(), addLast(), removeFirst(), and removeLast() are (p1, p2, p3, p4), respectively. * 100 random operations (0.8, 0.0, 0.2, 0.0) * 100 random operations (0.8, 0.0, 0.0, 0.2) * 100 random operations (0.0, 0.8, 0.2, 0.0) * 100 random operations (0.0, 0.8, 0.0, 0.2) * 100 random operations (0.4, 0.4, 0.1, 0.1) * 100 random operations (0.2, 0.2, 0.3, 0.3) ==> passed Test 7: Worst-case constant memory allocated or deallocated per deque operation? * 128 random operations * 256 random operations * 512 random operations ==> passed Total: 28/28 tests passed! ================================================================ Analyzing memory of RandomizedQueue *----------------------------------------------------------- For tests 1-5, the maximum amount of memory allowed for a RandomizedQueue containing n items is 48n + 192. Test 1a-1i: Total memory usage after inserting n items when n is a power of 2. n bytes ---------------------------------------------------------- => passed 32 320 => passed 64 576 => passed 128 1088 => passed 256 2112 => passed 512 4160 => passed 1024 8256 => passed 2048 16448 => passed 4096 32832 => passed 8192 65600 ==> 9/9 tests passed Memory: 8.00 n + 64.00 (R^2 = 1.000) Test 2a-2i: Total memory usage after inserting n items, when n is one more than a power of 2. n bytes ---------------------------------------------------------- => passed 33 576 => passed 65 1088 => passed 129 2112 => passed 257 4160 => passed 513 8256 => passed 1025 16448 => passed 2049 32832 => passed 4097 65600 => passed 8193 131136 ==> 9/9 tests passed Memory: 16.00 n + 48.00 (R^2 = 1.000) Test 3a-3i: Total memory usage after inserting 2n-1 items, and then deleting n-1 items, when n is one more than a power of 2. n bytes ---------------------------------------------------------- => passed 33 1088 => passed 65 2112 => passed 129 4160 => passed 257 8256 => passed 513 16448 => passed 1025 32832 => passed 2049 65600 => passed 4097 131136 => passed 8193 262208 ==> 9/9 tests passed Memory: 32.00 n + 32.00 (R^2 = 1.000) Test 4a-4i: Total memory usage after inserting n items, deleting n items, then inserting n times, when n is a power of 2. n bytes ---------------------------------------------------------- => passed 32 320 => passed 64 576 => passed 128 1088 => passed 256 2112 => passed 512 4160 => passed 1024 8256 => passed 2048 16448 => passed 4096 32832 => passed 8192 65600 ==> 9/9 tests passed Memory: 8.00 n + 64.00 (R^2 = 1.000) Test 5a-5i: Total memory usage after inserting n items, and then deleting all but one item. n bytes ---------------------------------------------------------- => passed 32 80 => passed 64 80 => passed 128 80 => passed 256 80 => passed 512 80 => passed 1024 80 => passed 2048 80 => passed 4096 80 => passed 8192 80 ==> 9/9 tests passed Memory: 80.00 (R^2 = 1.000) Test 6a-6d: Total memory usage of iterator after inserting n items. n bytes ---------------------------------------------------------- => passed 32 328 => passed 64 584 => passed 128 1096 => passed 256 2120 => passed 512 4168 => passed 1024 8264 => passed 2048 16456 => passed 4096 32840 => passed 8192 65608 ==> 9/9 tests passed Memory: 8.00 n + 72.00 (R^2 = 1.000) Test 7a: Insert 100 strings; delete them one at a time, checking for loitering after each deletion. ==> passed Test 7b: Perform random operations, checking for loitering after each operation. The probabilities of enqueue(), dequeue(), and sample() are (p1, p2, p3), respectively. * 200 random operations (0.8, 0.2, 0.0) * 200 random operations (0.2, 0.8, 0.0) * 200 random operations (0.6, 0.2, 0.2) * 200 random operations (0.2, 0.4, 0.4) ==> passed Test 8: Insert T items into queue; then iterate over queue and check that worst-case constant memory is allocated or deallocated per iterator operation. * T = 64 * T = 128 * T = 256 ==> passed Test 9: Total memory usage after inserting n items, seeking to identify values of n where memory usage is minimized as a function of n. n bytes ---------------------------------------------------------- => passed 8 128 => passed 16 192 => passed 32 320 => passed 64 576 => passed 128 1088 => passed 256 2112 => passed 512 4160 => passed 1024 8256 => passed 2048 16448 ==> 9/9 tests passed Memory: 8.00 n + 64.00 (R^2 = 1.000) Test 10: Total memory usage after inserting 4096 items, then successively deleting items, seeking values of n where memory usage is maximized as a function of n n bytes ---------------------------------------------------------- => passed 2049 65600 => passed 1025 32832 => passed 513 16448 => passed 257 8256 => passed 129 4160 => passed 65 2112 => passed 33 1088 => passed 17 576 => passed 9 320 ==> 9/9 tests passed Memory: 32.00 n + 32.00 (R^2 = 1.000) Min observed memory for RandomizedQueue: 8.00 n + 64.00 (R^2 = 1.000) Max observed memory for RandomizedQueue: 32.00 n + 32.00 (R^2 = 1.000) Running 75 total tests. Total: 75/75 tests passed! ================================================================ ******************************************************************************** * TIMING ******************************************************************************** Timing Deque *----------------------------------------------------------- Running 103 total tests. Test 1a-1k: make n calls to addFirst() followed by n calls to removeFirst() n seconds ---------------------------------- => passed 1024 0.00 => passed 2048 0.00 => passed 4096 0.00 => passed 8192 0.00 => passed 16384 0.00 => passed 32768 0.00 => passed 65536 0.00 => passed 128000 0.00 => passed 256000 0.00 => passed 512000 0.01 => passed 1024000 0.02 ==> 11/11 tests passed Test 2a-2k: make n calls to addLast() followed by n calls to removeLast() n seconds ---------------------------------- => passed 1024 0.00 => passed 2048 0.00 => passed 4096 0.00 => passed 8192 0.00 => passed 16384 0.00 => passed 32768 0.00 => passed 65536 0.00 => passed 128000 0.00 => passed 256000 0.00 => passed 512000 0.01 => passed 1024000 0.02 ==> 11/11 tests passed Test 3a-3k: make n calls to addFirst() followed by n calls to removeLast() n seconds ---------------------------------- => passed 1024 0.00 => passed 2048 0.00 => passed 4096 0.00 => passed 8192 0.00 => passed 16384 0.00 => passed 32768 0.00 => passed 65536 0.00 => passed 128000 0.00 => passed 256000 0.00 => passed 512000 0.01 => passed 1024000 0.02 ==> 11/11 tests passed Test 4a-4k: make n calls to addLast() followed by n calls to removeFirst() n seconds ---------------------------------- => passed 1024 0.00 => passed 2048 0.00 => passed 4096 0.00 => passed 8192 0.00 => passed 16384 0.00 => passed 32768 0.00 => passed 65536 0.00 => passed 128000 0.00 => passed 256000 0.01 => passed 512000 0.01 => passed 1024000 0.02 ==> 11/11 tests passed Test 5a-5g: make n random calls to addFirst(), removeFirst(), isEmpty(), and size() with probabilities (0.7, 0.1, 0.1, 0.1) n seconds ------------------------------ => passed 1024 0.00 => passed 2048 0.00 => passed 4096 0.00 => passed 8192 0.00 => passed 16384 0.00 => passed 32768 0.00 => passed 65536 0.00 => passed 128000 0.00 => passed 256000 0.01 => passed 512000 0.01 => passed 1024000 0.03 => passed 2048000 0.16 ==> 12/12 tests passed Test 6a-6g: make n random calls to addLast(), removeLast(), isEmpty(), and size(), with probabilities (0.7, 0.1, 0.1, 0.1) n seconds ------------------------------ => passed 1024 0.00 => passed 2048 0.00 => passed 4096 0.00 => passed 8192 0.00 => passed 16384 0.00 => passed 32768 0.00 => passed 65536 0.00 => passed 128000 0.00 => passed 256000 0.01 => passed 512000 0.02 => passed 1024000 0.03 => passed 2048000 0.06 ==> 12/12 tests passed Test 7a-7g: make n random calls to addFirst(), addLast(), removeFirst(), removeLast(), isEmpty(), and size() with probabilities (0.3, 0.3, 0.1, 0.1, 0.1, 0.1) n seconds ------------------------------ => passed 1024 0.00 => passed 2048 0.00 => passed 4096 0.00 => passed 8192 0.00 => passed 16384 0.00 => passed 32768 0.00 => passed 65536 0.00 => passed 128000 0.00 => passed 256000 0.01 => passed 512000 0.02 => passed 1024000 0.03 => passed 2048000 0.07 ==> 12/12 tests passed Test 8a-8g: make n calls to addFirst(); iterate over the n items by calling next() and hasNext() n seconds ------------------------------ => passed 1024 0.00 => passed 2048 0.00 => passed 4096 0.00 => passed 8192 0.00 => passed 16384 0.00 => passed 32768 0.00 => passed 65536 0.00 => passed 128000 0.00 => passed 256000 0.01 => passed 512000 0.01 => passed 1024000 0.01 => passed 2048000 0.04 ==> 12/12 tests passed Test 9a-9k: make n calls to addFirst()/addLast(); interleave n calls each to removeFirst(), removeLast(), addFirst(), and addLast() n seconds ---------------------------------- => passed 1025 0.00 => passed 2049 0.00 => passed 4097 0.00 => passed 8193 0.00 => passed 16385 0.00 => passed 32769 0.00 => passed 65537 0.00 => passed 128001 0.01 => passed 256001 0.01 => passed 512001 0.03 => passed 1024001 0.05 ==> 11/11 tests passed Total: 103/103 tests passed! ================================================================ Timing RandomizedQueue *----------------------------------------------------------- Running 67 total tests. Test 1: make n calls to enqueue() followed by n calls to dequeue(); count calls to StdRandom * n = 10 * n = 100 * n = 1000 ==> passed Test 2: make n calls to enqueue() follwed by n calls to sample(); count calls to StdRandom * n = 10 * n = 100 * n = 1000 ==> passed Test 3: make n calls to enqueue() and iterate over the n items; count calls to StdRandom * n = 10 * n = 100 * n = 1000 ==> passed Test 4a-k: make n calls to enqueue() followed by n calls to dequeue() n seconds ---------------------------------- => passed 1024 0.00 => passed 2048 0.00 => passed 4096 0.01 => passed 8192 0.02 => passed 16384 0.10 => passed 32768 0.39 => FAILED 65536 1.55 [ Most likely one of your operations is not constant time. ] ==> 6/11 tests passed Test 5a-k: make n calls to enqueue() followed by n random calls to enqueue(), sample(), dequeue(), isEmpty(), and size() with probabilities (0.2, 0.2, 0.2, 0.2, 0.2) n seconds ---------------------------------- => passed 1024 0.00 => passed 2048 0.00 => passed 4096 0.00 => passed 8192 0.01 => passed 16384 0.04 => passed 32768 0.16 => passed 65536 0.64 => FAILED 128000 2.43 [ Most likely one of your operations is not constant time. ] ==> 7/11 tests passed Test 6a-k: make n calls to enqueue() followed by n random calls to enqueue(), sample(), dequeue(), isEmpty(), and size() with probabilities (0.6, 0.1, 0.1, 0.1, 0.1) n seconds ---------------------------------- => passed 1024 0.00 => passed 2048 0.00 => passed 4096 0.00 => passed 8192 0.01 => passed 16384 0.03 => passed 32768 0.10 => passed 65536 0.40 => FAILED 128000 1.55 [ Most likely one of your operations is not constant time. ] ==> 7/11 tests passed Test 7a-k: make n calls to enqueue() followed by n random calls to enqueue(), sample(), dequeue(), isEmpty(), and size() with probabilities (0.1, 0.1, 0.6, 0.1, 0.1) n seconds ---------------------------------- => passed 1024 0.00 => passed 2048 0.00 => passed 4096 0.00 => passed 8192 0.01 => passed 16384 0.02 => passed 32768 0.08 => passed 65536 0.32 => FAILED 128000 1.24 [ Most likely one of your operations is not constant time. ] ==> 7/11 tests passed Test 8a-k: make n calls to enqueue() followed by n calls each to next() and hasNext(). n seconds ---------------------------------- => passed 1024 0.00 => passed 2048 0.00 => passed 4096 0.00 => passed 8192 0.00 => passed 16384 0.00 => passed 32768 0.00 => passed 65536 0.00 => passed 128000 0.01 => passed 256000 0.01 => passed 512000 0.02 => passed 1024000 0.06 ==> 11/11 tests passed Test 9a-i: make n calls to enqueue(); then call dequeue() twice, followed by enqueue() twice and repeat n times. n seconds ---------------------------------- => passed 1025 0.00 => passed 2049 0.01 => passed 4097 0.04 => passed 8193 0.15 => passed 16385 0.61 => FAILED 32769 2.41 [ Most likely one of your operations is not constant time. ] ==> 5/9 tests passed Total: 46/67 tests passed! ================================================================ 
